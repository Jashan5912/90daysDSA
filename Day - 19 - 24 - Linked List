

class LL {
	Node head;
	private int size;

	LL(){
		this.size=0;
	}

	class Node{
		String data;
		Node next;

		Node(String data){
			this.data=data;
			this.next=null;
			size++;

		}
	}

	//add - first
	public void addFirst(String data) {
		Node newNode = new Node(data);
		if(head == null) {
			head = newNode;
			return;
		}

		newNode.next = head;
		head = newNode;

	}

	//add - last
	public void addLast(String data) {
		Node newNode = new Node(data);
		if(head == null) {
			head = newNode;
			return;
		}

		Node currNode = head;
		while(currNode.next !=null) {
			currNode = currNode.next;
		}
		currNode.next = newNode;
	}

	//delete - First
	public void deleteFirst() {
		if(head == null) {
			System.out.println("The list is empty");
			return;
		}
		size--;
		head = head.next;
	}

	//delete - Last
	public void deleteLast() {
		if(head == null) {
			System.out.println("The list is empty");
			return;
		}
		size--;
		if(head.next==null) {
			head = null;
			return;
		}
		Node secondlast = head;
		Node lastNode = head.next;
		while(lastNode.next !=null) {
			lastNode = lastNode.next;
			secondlast = secondlast.next;

		}
		secondlast.next = null;
	}
	//Size
	public int getSize() {
		return size;
	}

	//Insertion At Middle(insertion at specific location)
	public void addInMiddle(int index,String data) {

		if(index>size || index<0) {
			System.out.println("Invalid Index value");
			return;
		}
		size++;

		Node newNode = new Node(data);
		if(head == null || index == 0) {
			newNode.next = head;
			head=newNode;
			return;
		}
		Node currNode = head;
		for(int i=1;i<size;i++) {
			if(i==index) {
				Node nextNode = currNode.next;
				currNode.next= newNode;

				newNode.next= nextNode;
				break;
			}
			currNode = currNode.next;
		}
	}
	//print list
	public void printList() {
		if(head == null) {
			System.out.print("list is empty");
			return;
		}
		Node currNode = head;
		while(currNode !=null) {
			System.out.print(currNode.data + " -> ");
			currNode = currNode.next;
		}
		System.out.println("NULL");
	}
	
	//Reverse a LinkedList(Iterative Method)
	public void IterevLL() {
		if(head == null||head.next==null) {
			return;
		}
		Node prevNode = head;
		Node currNode = head.next;
		
		while(currNode != null) {
			Node nextNode = currNode.next;
			currNode.next = prevNode;
			
			//update
			prevNode = currNode;
			currNode = nextNode;
		}
		head.next=null;
		head = prevNode;
	}
	
	//Reverse a LinkedList(Recursive Method)
	public Node RecuRevLL(Node head) {
		if(head == null || head.next == null) {
			return head;
		}
		
		Node newHead = RecuRevLL(head.next);
		head.next.next = head;
		head.next = null;
		
		return newHead;
		
	}
	public static void main(String[] args) {

		LL list = new LL();
		list.addFirst("a");
		list.addFirst("is");
		list.addLast("list");
		list.addFirst("this");
		list.printList();
		//		list.printList();
		//		list.deleteFirst();
		//		list.printList();
		//		list.deleteLast();
		//		list.printList();
		//		list.addFirst("this");
		//		System.out.println(list.getSize());
		//		list.addInMiddle(3, "linked");
		//		list.printList();
		list.IterevLL();
		list.printList();
		list.head =list.RecuRevLL(list.head);
		list.printList();
	}

}
