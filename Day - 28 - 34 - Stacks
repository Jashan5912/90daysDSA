Stack Implementation using Linked List


import java.util.*;
public class StackLinkedList {
	//linked list
	static class Node{
		int data;
		Node next;
		public Node(int data) {
			this.data = data;
			next = null;

		}
	}

	static class stack{
		public static Node head;
		public static boolean isEmpty() {
			return head == null;
		}
		public static void push(int data) {
			Node newNode = new Node(data);
			if(isEmpty()) {
				head = newNode;
				return;
			}
			newNode.next = head;
			head = newNode;
		}

		public static int pop() {
			if(isEmpty()) {
				return -1;
			}
			int top = head.data;
			head = head.next;
			System.out.println("Popped element is: "+ top);
			return top;
		}
		public static int peek() {
			if(isEmpty()) {
				return -1;
			}
			return head.data;
		}
	}

	public static void main(String[] args) {

		stack s = new stack();
		s.push(1);
		s.push(2);
		s.push(3);
		s.push(4);
		while(!s.isEmpty()) {
			System.out.println(s.peek());
			s.pop();
		}	
	}
}


Stack Implementation using ArrayList


import java.util.*;
public class StackUsingArray {
	static class AStack{
		static ArrayList<Integer> list = new ArrayList<>();
		public static boolean isEmpty() {
			return list.size() ==0;
		}

		//push
		public static void push(int data) {
			list.add(data);
		}

		//pop
		public static int pop() {
			if(isEmpty()) {
				return -1;
			}
			int top = list.get(list.size() - 1);
			list.remove(list.size()-1);
			return top;
		}

		//peek
		public static int peek() {
			if(isEmpty()) {
				return -1;
			}
			return list.get(list.size() - 1);
		}
	}
	public static void main(String[] args) {
		AStack s = new AStack();
		s.push(1);
		s.push(2);
		s.push(3);
		s.push(4);
		while(!s.isEmpty()) {
			System.out.println(s.peek());
			s.pop();
		}
	}
}


Implementation of Reverse Stack


package introduction;
import java.util.Stack;
public class Sstack {

	public static void pushAtBottom(int data, Stack<Integer> s) {
		if(s.isEmpty()) {
			s.push(data);
			return;
		}
		int top = s.pop();
		pushAtBottom(data,s);
		s.push(top);
		
	}
	public static void Reverse(Stack<Integer> s) {
		if(s.isEmpty()) {
			return;
		}
		int top = s.pop();
		Reverse(s);
		pushAtBottom(top,s);
		
	}
	public static void main(String[] args) {
		Stack<Integer> s = new Stack<>();
		s.push(1);
		s.push(2);
		s.push(3);
		Reverse(s);
		while(!s.isEmpty()) {
			System.out.println(s.peek());
			s.pop();
		}

	}

}


